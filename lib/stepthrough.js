// Generated by CoffeeScript 1.6.2
(function() {
  var collect, containsPromises, copyProperties, isPromise, isPropertyOf, makePromise, stepThrough, trySteps, _ref;

  _ref = require("faithful"), isPromise = _ref.isPromise, collect = _ref.collect, makePromise = _ref.makePromise;

  module.exports = stepThrough = function() {
    var errorCallback, memo, steps;

    if (arguments[0] instanceof Array) {
      memo = {};
      steps = arguments[0];
      errorCallback = arguments[1];
    } else if (arguments[1] instanceof Array) {
      memo = arguments[0];
      steps = arguments[1];
      errorCallback = arguments[2];
    } else {
      throw new Error("Invalid arguments");
    }
    return trySteps(memo, steps).then(null, function(err) {
      if (errorCallback != null) {
        return errorCallback.call(memo, err, memo);
      } else {
        throw err;
      }
    });
  };

  trySteps = function(memo, steps) {
    var copyAndIterate, i, iterate;

    i = -1;
    iterate = void 0;
    copyAndIterate = function(m) {
      copyProperties(m, memo);
      return iterate();
    };
    return makePromise(function(cb) {
      iterate = function() {
        var error, r;

        i++;
        if (i >= steps.length) {
          return cb(null, memo);
        }
        try {
          r = steps[i].call(memo, memo);
        } catch (_error) {
          error = _error;
          return cb(error);
        }
        if (containsPromises(memo)) {
          if ((isPromise(r)) && !(isPropertyOf(r, memo))) {
            return r.then(function() {
              return collect(memo);
            }).then(copyAndIterate, cb);
          } else {
            return collect(memo).then(copyAndIterate, cb);
          }
        } else {
          if (isPromise(r)) {
            return r.then(iterate, cb);
          } else {
            return iterate();
          }
        }
      };
      return iterate();
    });
  };

  containsPromises = function(obj) {
    var name, value;

    for (name in obj) {
      value = obj[name];
      if (isPromise(value)) {
        return true;
      }
    }
    return false;
  };

  isPropertyOf = function(subject, obj) {
    var name, value;

    for (name in obj) {
      value = obj[name];
      if (value === subject) {
        return true;
      }
    }
    return false;
  };

  copyProperties = function(sourceObject, targetObject) {
    var name, value, _results;

    _results = [];
    for (name in sourceObject) {
      value = sourceObject[name];
      _results.push(targetObject[name] = value);
    }
    return _results;
  };

}).call(this);

/*
//@ sourceMappingURL=stepthrough.map
*/
